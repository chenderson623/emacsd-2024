;; generated by function: `autoload:generate-loaddefs-file'.

;;;### (autoloads nil "contrib/fp-functions" "contrib/fp-functions.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/fp-functions.el

(register-definition-prefixes "contrib/fp-functions" '("fp/rg-search-"))

;;;***

;;;### (autoloads nil "contrib/ha-boxes-extra" "contrib/ha-boxes-extra.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/ha-boxes-extra.el

(autoload 'ha-org-subtree-metadata "contrib/ha-boxes-extra" "\
Return a list of key aspects of an org-subtree. Includes the
following: header text, body contents, list of tags, region list
of the start and end of the subtree.")

(autoload 'ha-org-refile-subtree-to-file "contrib/ha-boxes-extra" "\
Archive the org-mode subtree and create an entry in the
directory folder specified by DIR. It attempts to move as many of
the subtree's properties and other features to the new file.

\(fn DIR)" t)

(autoload 'ha-org-capture-code-snippet "contrib/ha-boxes-extra" "\
Given a file, F, this captures the currently selected text
  within an Org SRC block with a language based on the current mode
  and a backlink to the function and the file.

\(fn F)")

(register-definition-prefixes "contrib/ha-boxes-extra" '("ha-org-" "org-set-file-property"))

;;;***

;;;### (autoloads nil "contrib/kickingvegas-casual-avy" "contrib/kickingvegas-casual-avy.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/kickingvegas-casual-avy.el
 (autoload 'casual-avy-tmenu "casual-avy" nil t)

(register-definition-prefixes "contrib/kickingvegas-casual-avy" '("casual-avy-"))

;;;***

;;;### (autoloads nil "contrib/lem-org-functions" "contrib/lem-org-functions.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/lem-org-functions.el

(autoload 'org-emphasize-dwim "contrib/lem-org-functions" "\


\(fn &optional CHAR)" t)

(autoload 'org-emphasize-with-verbatim-dwim "contrib/lem-org-functions" nil t)

(autoload 'org-emphasize-with-code-dwim "contrib/lem-org-functions" nil t)

(autoload 'lem-maybe-mark-word "contrib/lem-org-functions" "\
Mark the current word. If cursor is outside of a word bounds, mark the empty position." t)

(autoload 'lem-org-advance "contrib/lem-org-functions" nil t)

(autoload 'lem-org-retreat "contrib/lem-org-functions" nil t)

(autoload 'lem-clone-buffer-and-narrow "contrib/lem-org-functions" "\
Clone buffer and narrow outline tree" t)

(register-definition-prefixes "contrib/lem-org-functions" '("lem--cursor-"))

;;;***

;;;### (autoloads nil "contrib/ora-lib" "contrib/ora-lib.el" (0 0
;;;;;;  0 0))
;;; Generated autoloads from contrib/ora-lib.el

(autoload 'ora-move-beginning-of-line "contrib/ora-lib" nil t)

(autoload 'ora-c-forward-sexp-function "contrib/ora-lib" "\


\(fn ARG)")

(autoload 'ora-query-replace "contrib/ora-lib" "\


\(fn FROM)" t)

(autoload 'ora-replace-regexp "contrib/ora-lib" "\
Works on current line if there's no region.
When ARG is non-nil launch `query-replace-regexp'.

\(fn ARG)" t)

(autoload 'ora-unfill-paragraph "contrib/ora-lib" "\
Transform a paragraph into a single line." t)

(autoload 'ora-ctrltab "contrib/ora-lib" "\
List buffers and give it focus." t)

(autoload 'ora-goto-hook-file "contrib/ora-lib" "\
Opens hooks.el at point specific to current `major-mode'" t)

(autoload 'ora-toggle-buffer "contrib/ora-lib" nil t)

(autoload 'ora-dired-rsync "contrib/ora-lib" "\


\(fn DEST)" t)

(autoload 'ora-describe-keys "contrib/ora-lib" nil t)

(autoload 'ora-ediff-buffers "contrib/ora-lib" nil t)

(autoload 'ora-eval-other-window "contrib/ora-lib" "\
Eval current expression in the context of other window.
Expression has to be of type (setq X BODY)
In case setq is not present, add it.

\(fn ARG123)" t)

(autoload 'ora-toggle-window-dedicated "contrib/ora-lib" nil t)

(autoload 'update-all-autoloads "contrib/ora-lib" nil t)

(autoload 'ora-dired-org-to-pdf "contrib/ora-lib" nil t)

(autoload 'ora-kill-current-buffer "contrib/ora-lib" nil t)

(autoload 'ora-save-and-switch-buffer "contrib/ora-lib" "\


\(fn &optional ARG)" t)

(autoload 'youtube-dl "contrib/ora-lib" nil t)

(autoload 'ora-directory-parent "contrib/ora-lib" "\
Return parent of directory DIR.

\(fn DIR)")

(autoload 'ora-pretty-things "contrib/ora-lib" "\
Compose chars according to `ora-pretty-alist'.")

(autoload 'ora-fontify-glyph "contrib/ora-lib" "\


\(fn ITEM GLYPH)")

(autoload 'ora-elisp-follow "contrib/ora-lib" "\
Jump to the definition of the function (or variable) at point.

\(fn NAME)" t)

(autoload 'capitalize-word-toggle "contrib/ora-lib" nil t)

(autoload 'upcase-word-toggle "contrib/ora-lib" nil t)

(autoload 'named-term "contrib/ora-lib" "\


\(fn NAME)" t)

(autoload 'sudired "contrib/ora-lib" nil t)

(autoload 'ora-insert-date "contrib/ora-lib" "\
Insert DATE using the current locale.

\(fn DATE)" t)

(autoload 'ora-insert-date-from "contrib/ora-lib" "\
Insert date that is DAYS from current.

\(fn &optional DAYS)" t)

(autoload 'ora-set-transparency "contrib/ora-lib" "\


\(fn ALPHA-LEVEL)" t)

(autoload 'ora-hide-ctrl-M "contrib/ora-lib" "\
Hides the disturbing '^M' showing up in files containing mixed
UNIX and DOS line endings." t)

(autoload 'ora-lookup-key "contrib/ora-lib" "\


\(fn KEY)")

(autoload 'ora-pretty-quote-glyphs "contrib/ora-lib")

(defadvice kill-compilation (after ora-disable-compiling-message activate) (setq compilation-in-progress nil))

(autoload 'ora-custom-setq "contrib/ora-lib" "\
Set a custom variable, with completion." t)

(autoload 'ora-start-process "contrib/ora-lib" "\


\(fn CMD)")

(autoload 'git-shortlog "contrib/ora-lib" nil t)

(autoload 'ora-recompile-startup "contrib/ora-lib" "\
Fix byte-compilation warnings emitted by lread.c." t)

(autoload 'ipinfo "contrib/ora-lib" "\
Return ip info from ipinfo.io for IP.

\(fn IP)" t)

(register-definition-prefixes "contrib/ora-lib" '("char-upcasep" "dbg" "ora-" "show-message"))

;;;***

;;;### (autoloads nil "contrib/org-attach-screenshot" "contrib/org-attach-screenshot.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/org-attach-screenshot.el

(autoload 'org-attach-screenshot "contrib/org-attach-screenshot" "\
Take an area screenshot and place it in the entry's attachment directory.

The user is interactively prompted for a base FILENAME for the
screenshot.  If the name is empty, a generic name will be
generated.  If the org entry has no defined attachment directory,
the user will be offered the choice to create one through the
`org-attach-screenshot-get-attach-dir' function.

The frame invoking the function gets hidden while taking the
screenshot unless a prefix argument PRFX is passed (this allows
taking screenshots of the Emacs session itself).  If no filename
extension is provided, .png will be added.

The command for invoking the external screenshot utility can be
customized using the `org-attach-screenshot-command-line' variable.

Note that the screenshots are not stored as actual attachments
which would mean that entries for the Attachments would be
written to the PROPERTIES section of a headline in addition to
the links being already placed inside the text.

\(fn PRFX FILENAME)" t)

(register-definition-prefixes "contrib/org-attach-screenshot" '("org-attach-screenshot-"))

;;;***

;;;### (autoloads nil "contrib/org-download" "contrib/org-download.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/org-download.el

(autoload 'org-download-enable "contrib/org-download" "\
Enable org-download.")

(register-definition-prefixes "contrib/org-download" '("org-download-"))

;;;***

;;;### (autoloads nil "contrib/org-protocol-capture-html" "contrib/org-protocol-capture-html.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/org-protocol-capture-html.el

(register-definition-prefixes "contrib/org-protocol-capture-html" '("org-protocol-capture-html-"))

;;;***

;;;### (autoloads nil "contrib/org-refile-immediate" "contrib/org-refile-immediate.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/org-refile-immediate.el

(autoload 'org-refile-immediate-target "contrib/org-refile-immediate" "\
Set current entry as `org-refile' target.
Non-nil turns off `org-refile-immediate', otherwise `org-refile'
will immediately refile without prompting for target using most
recent entry in `org-refile-targets' that matches
`org-refile-immediate-target' as the default.

\(fn &optional ARG)" t)

(register-definition-prefixes "contrib/org-refile-immediate" '("org-refile-immediate"))

;;;***

;;;### (autoloads nil "contrib/org-replace-link" "contrib/org-replace-link.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/org-replace-link.el

(autoload 'afs/org-replace-link-by-link-description "contrib/org-replace-link" "\
Replace an org link by its description or if empty its address" t)

(autoload 'afs/org-replace-all-links-by-description "contrib/org-replace-link" "\
Find all org links and replace by their descriptions.

\(fn &optional START END)" t)

;;;***

;;;### (autoloads nil "contrib/sdcv" "contrib/sdcv.el" (0 0 0 0))
;;; Generated autoloads from contrib/sdcv.el

(autoload 'sdcv-mode "contrib/sdcv" "\
Major mode to look up word through sdcv.
\\{sdcv-mode-map}
Turning on Text mode runs the normal hook `sdcv-mode-hook'.

\(fn)" t)

(autoload 'sdcv-search-pointer "contrib/sdcv" "\
Get current word.
And display complete translations in other buffer.

\(fn &optional WORD)" t)

(autoload 'sdcv-search-pointer+ "contrib/sdcv" "\
Translate current point word.
And show information use tooltip.
But this function use a simple dictionary list." t)

(autoload 'sdcv-search-input "contrib/sdcv" "\
Translate current input WORD.
And show information in other buffer.

\(fn &optional WORD)" t)

(autoload 'sdcv-search-input+ "contrib/sdcv" "\
Translate current point WORD.
And show information use tooltip.

\(fn &optional WORD)" t)

(register-definition-prefixes "contrib/sdcv" '("sdcv-"))

;;;***

;;;### (autoloads nil "contrib/vedang-utility-functions" "contrib/vedang-utility-functions.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/vedang-utility-functions.el

(register-definition-prefixes "contrib/vedang-utility-functions" '("this-week-range"))

;;;***

;;;### (autoloads nil "contrib/windows-org-screenshot" "contrib/windows-org-screenshot.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/windows-org-screenshot.el

(autoload 'windows-org-screenshot "contrib/windows-org-screenshot" "\
Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file." t)

;;;***

;;;### (autoloads nil "contrib/backup-walker" "contrib/backup-walker.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from contrib/backup-walker.el

(autoload 'backup-walker-start "contrib/backup-walker" "\
start walking with the latest backup

with universal arg, ask for a file-name.

\(fn ORIGINAL-FILE)" t)

(register-definition-prefixes "contrib/backup-walker" '("backup-walker-"))

;;;***
